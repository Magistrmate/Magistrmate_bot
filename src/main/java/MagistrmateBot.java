import com.mongodb.MongoException;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.UpdateOptions;
import com.mongodb.client.model.Updates;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.*;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageMedia;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.media.InputMedia;
import org.telegram.telegrambots.meta.api.objects.media.InputMediaPhoto;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;

public class MagistrmateBot extends TelegramLongPollingBot {
    Integer nextBook = 1;
    Integer showBook;
    Boolean nextBookUse = false;
    String textLog;
    String id;
    String answer;
    String script;
    String userIdTalkSupport = "";
    String userIdTalkSupportWait = "";
    String textHistory;
    String name;
    String username;
    Boolean notification = true;
    String notificationId = "";
    String chatId;
    String text;
    MongoClient mongoClient = MongoClients.create(BotConfig.DB_TOKEN);
    MongoDatabase database = mongoClient.getDatabase("MagistrmateDatabase");
    MongoCollection<Document> collection = database.getCollection("MagistrmateCollection");
    MongoCollection<Document> collectionLog = database.getCollection("Log");

    @Override
    public String getBotUsername() {
        return "Magistrmate_bot";
    }

    @Override
    public String getBotToken() {
        return BotConfig.BOT_TOKEN;
    }

    @Override
    public void onUpdateReceived(Update update) {
        Message message = update.getMessage();
        if (update.hasMessage()) {
            chatId = message.getChatId().toString();
            username = message.getFrom().getUserName();
            name = message.getFrom().getFirstName();
            text = message.getText();
            if (chatId.equals(BotConfig.USER_SUPPORT)) {
                createMessage(text, update, userIdTalkSupport);
                if (text.contains("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è")) {
                    if (userIdTalkSupportWait.equals("") || userIdTalkSupport.equals(userIdTalkSupportWait)) {
                        userIdTalkSupport = "";
                    } else {
                        userIdTalkSupport = userIdTalkSupportWait;
                        createMessage("–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–µ–π—á–∞—Å –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç", update, userIdTalkSupportWait);
                        createHistory(userIdTalkSupport);
                    }
                }
            } else if (chatId.equals(userIdTalkSupport))
                createMessage(text, update, BotConfig.USER_SUPPORT);
            else createTalk(message, update);
            if (!chatId.equals(BotConfig.USER_SUPPORT) && userIdTalkSupport.equals("") && !chatId.equals(BotConfig.USER_ME)) {
                if (notification && !chatId.equals(notificationId)) {
                    createMessage("–°–æ –º–Ω–æ–π –æ–±—â–∞–µ—Ç—Å—è @" + username + "\\(" + name + "\\)", update, BotConfig.USER_SUPPORT);
                    notification = false;
                    notificationId = "";
                } else {
                    notification = true;
                    notificationId = chatId;
                }
            }
        }
        if (update.hasCallbackQuery()) {
            Message backMessage = update.getCallbackQuery().getMessage();
            String backText = update.getCallbackQuery().getData();
            chatId = backMessage.getChatId().toString();
            Integer messageId = backMessage.getMessageId();
            createLog(update, "*–ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É " + backText + "*", "User", true);
            if (backText.equals("next") || backText.equals("previous") || backText.matches(".*\\d+.*")) {
                Document doc = collectionLog.find(Filters.eq("_id", id)).first();
                assert doc != null;
                if (doc.getInteger("NumberBook") != null) nextBook = doc.getInteger("NumberBook");
                showBook = nextBook - 1;
                nextBookUse = true;
                if (backText.equals("previous")) {
                    if (nextBook == 1) nextBook = 5;
                    else nextBook = nextBook - 2;
                } else if (backText.matches(".*\\d+.*")) {
                    nextBook = Integer.parseInt(backText) - 1;
                }
                if (nextBook == collection.countDocuments()) nextBook = 0;
                Document book = collection.find().skip(nextBook).first();
                assert book != null;
                InputMedia photo = InputMediaPhoto.builder()
                        .media(book.getString("cover"))
                        .caption("*" + book.getString("name") + "*\n" + book.getString("description"))
                        .parseMode("MarkdownV2").build();
                EditMessageMedia replacePhoto = EditMessageMedia.builder()
                        .media(photo).chatId(chatId)
                        .messageId(messageId).build();
                InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
                nextBook++;
                Document query = new Document().append("_id", id);
                Bson updates = Updates.combine(Updates.set("NumberBook", nextBook));
                UpdateOptions options = new UpdateOptions().upsert(true);
                collectionLog.updateOne(query, updates, options);
                createFirstKeyboard(update, inlineKeyboard);
                replacePhoto.setReplyMarkup(inlineKeyboard);
                try {
                    execute(replacePhoto);
                    createLog(update, "*–ü–µ—Ä–µ–ª–∏—Å—Ç–Ω—É–ª –∫–Ω–∏–≥—É*", "Bot ", true);
                } catch (TelegramApiException e) {
                    createMessage("–°–º–µ–Ω–∞ –æ–±–ª–æ–∂–∫–∏\n" + e, update, BotConfig.USER_SUPPORT);
                }
            } else if (backText.equals("excerpt")) {
                Document book = collection.find().skip(showBook).first();
                assert book != null;
                EditMessageReplyMarkup keyboard = EditMessageReplyMarkup.builder()
                        .chatId(chatId)
                        .messageId(messageId).build();
                InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rowList = new ArrayList<>();
                List<InlineKeyboardButton> row1 = new ArrayList<>();
                List<InlineKeyboardButton> row2 = new ArrayList<>();
                List<InlineKeyboardButton> row3 = new ArrayList<>();
                List<InlineKeyboardButton> row4 = new ArrayList<>();
                InlineKeyboardButton button1 = InlineKeyboardButton.builder()
                        .text("üåç Online")
                        .callbackData("online")
                        .url(book.getString("excerpt")).build();
                InlineKeyboardButton button2 = InlineKeyboardButton.builder()
                        .text("üìò EPUB")
                        .callbackData("epub").build();
                InlineKeyboardButton button3 = InlineKeyboardButton.builder()
                        .text("üìô FB2")
                        .callbackData("fb-two").build();
                InlineKeyboardButton button4 = InlineKeyboardButton.builder()
                        .text("üìï PDF")
                        .callbackData("pdf").build();
                InlineKeyboardButton button5 = InlineKeyboardButton.builder()
                        .text("üéß –ê—É–¥–∏–æ")
                        .callbackData("audio").build();
                InlineKeyboardButton returnButton = InlineKeyboardButton.builder()
                        .text("‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è")
                        .callbackData("return").build();
                row1.add(button1);
                row2.add(button2);
                row2.add(button3);
                row2.add(button4);
                row3.add(button5);
                row4.add(returnButton);
                rowList.add(row1);
                rowList.add(row2);
                rowList.add(row3);
                rowList.add(row4);
                inlineKeyboard.setKeyboard(rowList);
                keyboard.setReplyMarkup(inlineKeyboard);
                try {
                    execute(keyboard);
                    createLog(update, "*–ü–æ–º–µ–Ω—è–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Ç—Ä—ã–≤–∫–∏*", "Bot ", true);
                } catch (TelegramApiException e) {
                    createMessage("–ü–æ–∫–∞–∑–∞–ª –æ—Ç—Ä—ã–≤–∫–∏\n" + e, update, BotConfig.USER_SUPPORT);
                }
            } else if (backText.equals("epub")) {
                createDocument(backMessage, backText, update);
                /* ok
                AnswerCallbackQuery answer = new AnswerCallbackQuery();
                String idCall = update.getCallbackQuery().getId();
                answer.setCallbackQueryId(idCall);
                answer.setText("piska");
                answer.setShowAlert(false);
                try{
                    execute(answer);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }*/
            } else if (update.getCallbackQuery().getData().equals("fb-two")) {
                createDocument(backMessage, backText, update);
            } else if (update.getCallbackQuery().getData().equals("pdf")) {
                createDocument(backMessage, backText, update);
            } else if (update.getCallbackQuery().getData().equals("audio")) {
                createAudio(backMessage, backText, update);
            } else if (update.getCallbackQuery().getData().equals("shops")) {
                Document book = collection.find().skip(showBook).first();
                assert book != null;
                EditMessageReplyMarkup keyboard = EditMessageReplyMarkup.builder()
                        .chatId(chatId)
                        .messageId(messageId).build();
                InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rowList = new ArrayList<>();
                List<InlineKeyboardButton> row1 = new ArrayList<>();
                List<InlineKeyboardButton> row2 = new ArrayList<>();
                List<InlineKeyboardButton> row3 = new ArrayList<>();
                List<InlineKeyboardButton> row4 = new ArrayList<>();
                InlineKeyboardButton button1 = new InlineKeyboardButton();
                InlineKeyboardButton button2 = new InlineKeyboardButton();
                InlineKeyboardButton button3 = new InlineKeyboardButton();
                InlineKeyboardButton button4 = new InlineKeyboardButton();
                InlineKeyboardButton button5 = new InlineKeyboardButton();
                InlineKeyboardButton button6 = new InlineKeyboardButton();
                InlineKeyboardButton returnButton = new InlineKeyboardButton();
                urlShops("Ridero", "üü†", button1, book, row1);
                urlShops("–õ–∏—Ç–†–µ—Å", "‚ö™", button2, book, row2);
                urlShops("Wildberries", "üü£", button3, book, row2);
                urlShops("OZON", "üîµ", button4, book, row2);
                urlShops("AliExpress", "üî¥", button5, book, row3);
                urlShops("Amazon", "üü°", button6, book, row3);
                returnButton.setText("‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è");
                returnButton.setCallbackData("return");
                row4.add(returnButton);
                rowList.add(row1);
                rowList.add(row2);
                rowList.add(row3);
                rowList.add(row4);
                inlineKeyboard.setKeyboard(rowList);
                keyboard.setReplyMarkup(inlineKeyboard);
                try {
                    execute(keyboard);
                    createLog(update, "*–û—Ç–æ–±—Ä–∞–∑–∏–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É " + backText + "*", "Bot ", true);
                } catch (TelegramApiException e) {
                    createMessage("–ü–æ–∫–∞–∑–∞–ª –º–∞–≥–∞–∑–∏–Ω—ã\n" + e, update, BotConfig.USER_SUPPORT);
                }
            } else if (backText.equals("return")) {
                EditMessageReplyMarkup backKeyboard = new EditMessageReplyMarkup();
                backKeyboard.setChatId(backMessage.getChatId().toString());
                backKeyboard.setMessageId(backMessage.getMessageId());
                InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
                createFirstKeyboard(update, inlineKeyboard);
                backKeyboard.setReplyMarkup(inlineKeyboard);
                try {
                    execute(backKeyboard);
                    createLog(update, "*–í–µ—Ä–Ω—É–ª —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É*", "Bot ", true);
                } catch (TelegramApiException e) {
                    createMessage("–ù–∞–∂–∞–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç\n" + e, update, BotConfig.USER_SUPPORT);
                }
            }
        }
    }

    public void urlShops(String shop, String emoji, InlineKeyboardButton button, Document book, List<InlineKeyboardButton> row) {
        button.setText(emoji + " " + shop);
        button.setUrl(book.getEmbedded(Arrays.asList("Shops", shop), String.class));
        row.add(button);
    }

    private void createMessage(String text, Update update, String sentId) {
        SendMessage createMessage = SendMessage.builder()
                .chatId(sentId)
                .text(text)
                .parseMode("MarkdownV2").build();
        if (text.equals("–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è, —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—åü§î"))
            createKeyboard(createMessage, update);
        try {
            execute(createMessage);
            if (!text.contains("–°–æ –º–Ω–æ–π –æ–±—â–∞–µ—Ç—Å—è @") && !text.equals("–ê–ª–æ, —Ç–∞–º –æ—á–µ—Ä–µ–¥—å —É–∂–µ!")) {
                textLog = text.replaceAll("\\\\", "");
                createLog(update, textLog, "Bot ", false);
            }
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void createFewCovers(Message message, Update update) {
        List<InputMedia> media = new ArrayList<>();
        List<Document> books = collection.find().skip(1).into(new ArrayList<>());
        for (Document book : books) {
            InputMedia photo = InputMediaPhoto.builder()
                    .parseMode("MarkdownV2")
                    .media(book.getString("cover"))
                    .caption("*" + book.getString("name") + "*\n" + book.getString("description")).build();
            media.add(photo);
        }
        SendMediaGroup mediaGroup = SendMediaGroup.builder()
                .chatId(message.getChatId().toString())
                .medias(media).build();
        try {
            execute(mediaGroup);
            createLog(update, "*–ü–æ–∫–∞–∑–∞–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–ª–æ–∂–µ–∫*", "Bot ", false);
        } catch (TelegramApiException e) {
            createMessage("–ü–æ–∫–∞–∑–∞–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–ª–æ–∂–µ–∫\n" + e, update, BotConfig.USER_SUPPORT);
        }
    }

    private void createCover(Update update, String chatId) {
        Document doc = collection.find().limit(1).first();
        assert doc != null;
        SendPhoto photo = SendPhoto.builder()
                .parseMode("MarkdownV2")
                .chatId(chatId)
                .photo(new InputFile(doc.getString("cover")))
                .caption("*" + doc.getString("name") + "*\n" + doc.getString("description")).build();
        InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
        createFirstKeyboard(update, inlineKeyboard);
        photo.setReplyMarkup(inlineKeyboard);
        try {
            execute(photo);
            createLog(update, "*–ü–æ–∫–∞–∑–∞–ª –æ–±–ª–æ–∂–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏*", "Bot ", false);
        } catch (TelegramApiException e) {
            createMessage("–û–±–ª–æ–∂–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏\n" + e, update, BotConfig.USER_SUPPORT);
        }
    }

    private void createDocument(Message message, String backText, Update update) {
        SendDocument document = new SendDocument();
        document.setChatId(message.getChatId().toString());
        Document doc = collection.find().skip(showBook).first();
        assert doc != null;
        document.setDocument(new InputFile(doc.getString(backText)));
        try {
            execute(document);
            createLog(update, "*–ü—Ä–∏—Å–ª–∞–ª " + backText + "*", "Bot ", true);
        } catch (TelegramApiException e) {
            createMessage("–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏—Å–ª–∞–ª\n" + e, update, BotConfig.USER_SUPPORT);
        }
    }

    private void createAudio(Message message, String backText, Update update) {
        SendAudio audio = new SendAudio();
        audio.setChatId(message.getChatId().toString());
        Document doc = collection.find().skip(showBook).first();
        assert doc != null;
        audio.setAudio(new InputFile(doc.getString(backText)));
        try {
            execute(audio);
            createLog(update, "*–ü—Ä–∏—Å–ª–∞–ª " + backText + "*", "Bot ", true);
        } catch (TelegramApiException e) {
            createMessage("–ê—É–¥–∏–æ –ø—Ä–∏—Å–ª–∞–ª\n" + e, update, BotConfig.USER_SUPPORT);
        }
    }

    public void createFirstKeyboard(Update update, InlineKeyboardMarkup inlineKeyboard) {
        List<List<InlineKeyboardButton>> rowList = new ArrayList<>();
        InlineKeyboardButton ShopsButton = new InlineKeyboardButton();
        InlineKeyboardButton NextButton = new InlineKeyboardButton();
        InlineKeyboardButton ExcerptButton = new InlineKeyboardButton();
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        List<InlineKeyboardButton> row2_3 = new ArrayList<>();
        List<InlineKeyboardButton> row3_4 = new ArrayList<>();
        ShopsButton.setText("üõç –ö–Ω–∏–≥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö");
        ShopsButton.setCallbackData("shops");
        NextButton.setText("‚û° –°–ª–µ–¥—É—é—â–∞—è");
        NextButton.setCallbackData("next");
        ExcerptButton.setText("üìÑ –û—Ç—Ä—ã–≤–æ–∫ –∏–∑ –∫–Ω–∏–≥–∏");
        ExcerptButton.setCallbackData("excerpt");
        row1.add(ShopsButton);
        rowList.add(row1);
        if (update.getCallbackQuery() != null && nextBookUse) {
            List<InlineKeyboardButton> row2 = new ArrayList<>();
            for (int i = 1; i <= collection.countDocuments(); i++) {
                InlineKeyboardButton bookButton = new InlineKeyboardButton();
                if (nextBook == i) bookButton.setText("üîπ" + i + "üîπ");
                else bookButton.setText(String.valueOf(i));
                bookButton.setCallbackData(String.valueOf(i));
                row2.add(bookButton);
            }
            rowList.add(row2);
            InlineKeyboardButton PreviousButton = new InlineKeyboardButton();
            PreviousButton.setText("–ü—Ä–µ–¥—ã–¥—É—â–∞—è ‚¨Ö");
            PreviousButton.setCallbackData("previous");
            row2_3.add(PreviousButton);
        }
        row2_3.add(NextButton);
        row3_4.add(ExcerptButton);
        rowList.add(row2_3);
        rowList.add(row3_4);
        inlineKeyboard.setKeyboard(rowList);
    }

    private void createKeyboard(SendMessage createMessage, Update update) {
        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row1 = new KeyboardRow();
        KeyboardRow row2 = new KeyboardRow();
        row1.add("üìö –ö–Ω–∏–≥–∏");
        row1.add("üîà –ê—É–¥–∏–æ–∫–Ω–∏–≥–∏");
        row2.add("üìù –û–± –∞–≤—Ç–æ—Ä–µ");
        row2.add("üë§ –ü–æ–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞");
        keyboard.add(row1);
        keyboard.add(row2);
        ReplyKeyboardMarkup createKeyboard = ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .oneTimeKeyboard(true)
                .inputFieldPlaceholder("–ü–∏—à–∏—Ç–µ, —è —á–∏—Ç–∞—é")
                .selective(true).build();
        createMessage.setReplyMarkup(createKeyboard);
        createLog(update, "*–ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Ä–∏—Å–æ–≤–∞–ª*", "Bot ", false);
    }

    public void createLog(Update update, String textLog, String who, Boolean keyboard) {
        Instant instant = Instant.now();
        ZonedDateTime zdt = ZonedDateTime.ofInstant(instant, ZoneId.of("Europe/Moscow"));
        regionDay();
        DateTimeFormatter time = DateTimeFormatter.ofPattern("HH:mm");
        String timeString = zdt.format(time);
        if (keyboard) {
            id = update.getCallbackQuery().getFrom().getId().toString();
            answer = update.getCallbackQuery().getMessage().toString();
        } else {
            id = update.getMessage().getFrom().getId().toString();
            answer = update.getMessage().toString();
            name = update.getMessage().getFrom().getFirstName();
            username = update.getMessage().getFrom().getUserName();
        }
        try {
            collectionLog.insertOne(new Document().append("_id", id).append("Info", answer).append("Name", name)
                    .append("Username", username).append(regionDay(), timeString + " " + who + ": " + textLog + "\n"));
        } catch (MongoException me) {
            Document doc = collectionLog.find(Filters.eq("_id", id)).first();
            assert doc != null;
            Document query = new Document().append("_id", id);
            if (doc.getString(regionDay()) == null) script = "";
            else script = doc.getString(regionDay());
            Bson updates = Updates.combine(Updates.set(regionDay(), script + timeString + " " + who + ": " + textLog +
                    "\n"));
            UpdateOptions options = new UpdateOptions().upsert(true);
            collectionLog.updateOne(query, updates, options);
            Bson updatesName = Updates.combine(Updates.set("Name", name));
            collectionLog.updateOne(query, updatesName, options);
            Bson updatesUserName = Updates.combine(Updates.set("Username", username));
            collectionLog.updateOne(query, updatesUserName, options);
        }
    }

    public void createHistory(String whoId) {
        Document doc = collectionLog.find(Filters.eq("_id", whoId)).first();
        SendMessage createMessage = new SendMessage();
        createMessage.setChatId(BotConfig.USER_SUPPORT);
        regionDay();
        assert doc != null;
        if (doc.getString(regionDay()).length() > 4096) {
            textHistory = "...\n" + doc.getString(regionDay()).substring(3500);
        } else textHistory = doc.getString(regionDay());
        createMessage.setText(textHistory + "–ò–º—è: " + doc.getString("Name") + " –õ–æ–≥–∏–Ω: @" + doc.getString("Username"));
        createMessage.enableMarkdownV2(false);
        try {
            execute(createMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public void createTalk(Message message, Update update) {
        if (message.hasAudio() || message.hasDocument()) {
            Document query = new Document().append("_id", message.getCaption());
            Bson updates = Updates.combine(Updates.set("audio", message.getAudio().getFileId()));
            UpdateOptions options = new UpdateOptions().upsert(true);
            try {
                collection.updateOne(query, updates, options);
            } catch (MongoException me) {
                createMessage("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ\n" + me, update, BotConfig.USER_SUPPORT);
            }
        } else {
            String text = message.getText().toLowerCase(Locale.ROOT);
            createLog(update, text, "User", false);
            if (text.equals("/start")) {
                createMessage("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å " + message.getFrom().getFirstName() + "\\!üëã\n" +
                        "–ú—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–π—Ç–∏ —Å—Ä–∞–∑—É –∫ –∫–Ω–∏–≥–∞–º –∏–ª–∏ –ø–æ–æ–±—â–∞—Ç—å—Å—è\\. –Ø –ø–æ–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∑–Ω–∞–Ω–∏—è –≤–∞—à–µ–≥–æ " +
                        "–º–∏—Ä–∞, –ø–æ—ç—Ç–æ–º—É –ø–∏—à–∏—Ç–µ –∏ –µ—Å–ª–∏ –Ω–µ –ø–æ–π–º—É, —Ç–æ –≤—ã–¥–∞–º –≤–∞–º –ø–æ–¥—Å–∫–∞–∑–∫–∏\\.", update, chatId);
            } else if (text.contains("–ø—Ä–∏–≤") || text.contains("—Ö–∞–π") || text.contains("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π")) {
                createMessage("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µü§ñ", update, chatId);
            } else if (text.contains("–∂–∞–Ω—Ä") || text.contains("–ø—Ä–æ —á—Ç–æ")) {
                createMessage("–ö–Ω–∏–≥–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –∂–∞–Ω—Ä–∞—Ö –æ—Ç —É–∂–∞—Å–æ–≤üëª, –º–∏—Å—Ç–∏–∫–∏üëπ –∏ –Ω–∞—É—á–Ω–æ–π —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏üß¨ –¥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–∑—ãüìì –∏ —Ñ—ç–Ω—Ç–µ–∑–∏‚ú®", update, chatId);
            } else if (text.contains("–æ–±—â–∞") || text.contains("–≥–æ–≤–æ—Ä") || text.contains("–±–æ–ª—Ç–∞")) {
                createMessage("–ë–µ–∑ –ø—Ä–æ–±–ª–µ–ºüëå –ë–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞–º —è –≤—Å—ë —Å–æ—Ü–∏–∞–ª—å–Ω–µ–πüòÖ –û–¥–Ω–∞–∫–æ, –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å—Å—è –ø–∞–Ω–∏–∫–∞ –∏ —è –≤—ã–¥–∞–º –≤–∞–º –∫–Ω–æ–ø–∫–∏üôÉ", update, chatId);
            } else if (text.contains("–∫–Ω–∏–≥") || text.contains("–∫–Ω–∏–∂") || text.contains("–æ—Ç—Ä—ã–≤–æ–∫") ||
                    text.contains("–ø—Å–∏—Ö–æ–ª–æ–≥") || text.contains("–ø–æ–ø—É–ª—è—Ä–Ω") || (text.contains("—Ä–µ–º–∞—Ä–∫"))) {
                if (text.contains("—Ä–µ–º–∞—Ä–∫")) createMessage("–ö–ª–∞—Å—Å–Ω—ã–µ –∫–Ω–∏–≥–∏ –ø–∏—à–µ—Çüëè @Magistrmate —ç—Ç–æ –ø—Ä–æ –¥—Ä—É–≥–æ–µü§∑", update, chatId);
                if (text.contains("–ø—Å–∏—Ö–æ–ª–æ–≥")) createMessage("–¢–∞–∫–∏—Ö –∫–Ω–∏–≥ —É –Ω–∞—Å, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Çüòî –ó–∞—Ç–æ –µ—Å—Ç—å —ç—Ç–∏‚¨á", update, chatId);
                if (text.contains("–ø–æ–ø—É–ª—è—Ä–Ω")) createMessage("–¢–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Çüòû, –Ω–æ —è –±—ã –≤–∞–º —Å–æ–≤–µ—Ç–æ–≤–∞–ª –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–±–æ—Ä–Ω–∏–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–πüòÅ", update, chatId);
                else createFewCovers(message, update);
                createCover(update, chatId);
            } else if (text.contains("–æ–ø–µ—Ä–∞—Ç–æ—Ä")) {
                if (userIdTalkSupport.equals("")) {
                    createMessage("–°–µ–π—á–∞—Å –ø–æ–∑–æ–≤—É, –º–∏–Ω—É—Ç–∫—Éüó£", update, chatId);
                    createHistory(chatId);
                    userIdTalkSupport = chatId;
                } else {
                    createMessage("–û–ø–µ—Ä–∞—Ç–æ—Ä —É–∂–µ –∫–æ–º—É\\-—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –ø–æ–∑–∂–µ‚è≥", update, chatId);
                    createMessage("–ê–ª–æ, —Ç–∞–º –æ—á–µ—Ä–µ–¥—å —É–∂–µ\\!", update, BotConfig.USER_SUPPORT);
                    userIdTalkSupportWait = chatId;
                }
            } else if (text.contains("–æ–± –∞–≤—Ç–æ—Ä–µ") || (text.contains("–æ –≤–∞—Å") || text.contains("–ø—Ä–æ –∞–≤—Ç–æ—Ä–∞"))) {
                createMessage("""
                        [–ê–ø–∞—Å–æ–≤ –î–∞–Ω–∏–∏–ª](tg://user?id=411435416) —Ä–æ–¥–∏–ª—Å—è –∏ –≤—ã—Ä–æ—Å –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∞–ª—å–Ω–æ–º –≥–æ—Ä–æ–¥–∫–µ –¥–∞–ª–µ–∫–æ –æ—Ç —Å—Ç–æ–ª–∏—Ü—ã\\. –° 18 –ª–µ—Ç –∂–∏–ª –≤ –ú–æ—Å–∫–≤–µ, –ø–æ–ª—É—á–∏–ª –¥–≤–∞ –≤—ã—Å—à–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–ª —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–æ–π –∂–µ —Å—Ñ–µ—Ä–µ\\. –£ –Ω–µ–≥–æ –µ—Å—Ç—å –∂–µ–Ω–∞, —Å–æ–±–∞–∫–∞ –∏ –æ—Å—Ç—Ä–æ–µ –∂–µ–ª–∞–Ω–∏–µ –ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –≤–∞—Å\\.‚úç
                        –ö–æ–Ω—Ç–∞–∫—Ç—ã: üü¶¬†[VK](vk.com/magistrmate),üì∑¬†[Instagram](instagram.com/magistrmate/),üê¶¬†[Twitter](twitter.com/Magistrmate),üßëüìñ¬†[Facebook](facebook.com/magistrmate), ‚úâ¬†magistrmate@ya\\.ru
                        –ë–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω –∞–≤—Ç–æ—Ä–æ–º –∫–Ω–∏–≥üëæ""", update, chatId);
            } else if (text.contains("—Å–ø–∞—Å–∏–±–æ")) {
                createMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—åüòå", update, chatId);
            } else if (text.equals("–æ–∫") || text.equals("–æ–∫–µ–π")) {
                createMessage("üëå", update, chatId);
                createMessage("–†–∞–¥ –ø–æ–º–æ—á—åüòè, " + name, update, chatId);
            } else {
                createMessage("–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è, —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—åü§î", update, chatId);
            }
        }
    }

    public String regionDay() {
        Instant instant = Instant.now();
        ZonedDateTime zdt = ZonedDateTime.ofInstant(instant, ZoneId.of("Europe/Moscow"));
        DateTimeFormatter date = DateTimeFormatter.ofPattern("dd/MM/yy");
        return zdt.format(date);
        /* tomorrow
        Calendar calendar = new GregorianCalendar();
        calendar.setTime(date);
        calendar.add(Calendar.DATE, 1);
        date = calendar.getTime();*/
    }
}